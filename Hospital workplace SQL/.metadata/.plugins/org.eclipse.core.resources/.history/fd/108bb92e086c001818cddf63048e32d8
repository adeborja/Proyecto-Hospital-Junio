/**
 * nombre de programa: MetodosMedico.java
 * 
 * propiedades basicas:
 * 	no hay
 * 
 * propiedades derivadas:
 * 	no hay
 * 
 * metodos adicionales:
 * 	void crearArchivos()
 * 	boolean crearMedico()
 * 	boolean escribirMedico(File f, MedicoIMPL m)
 * 	void pintarMedicosEnPantalla(File f)
 * 	long buscarPosicionNuevoMedicoEnArchivo(File f, MedicoIMPL m)
 * 	void desplazarRegistrosParaAgregar(File f, long puntero)
 * 	void desplazarRegistrosParaQuitar(File f, long puntero)
 * 	int borrarMedico(int numeroColegiado)
 *  MedicoIMPL getMedico(File f, int numeroColegiado)
 */
package Hospital;

import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import Pendiente.MetodosGenerales;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import java.lang.Thread.State;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;



public class MetodosMedico {
	
	static File carpeta = new File("./archivos");
	static File archivoMedicos = new File(carpeta.getAbsolutePath()+"/medicos.dat");
	static File bajasMedicos = new File(carpeta.getAbsolutePath()+"/bajasMedicos.dat");
	static RandomAccessFile archivo = null;
	
	static int tamanioRegistroCompleto=91, posicionRegistroNumeroColegiado=85;
	
	static String nombreTablaMedicos = "Medicos", nombreTablaBajas = "MedicosDeBaja";
	
	
	/**/
	private static String sourceURL = "jdbc:sqlserver://localhost";
	
	private String usuario, contrasenia;
	
	public MetodosMedico(String nUsuario, String nContrasenia)
	{
		this.usuario=nUsuario;
		this.contrasenia=nContrasenia;
	}
	
	
	
	/**
	 * cabecera: void crearArchivos()
	 * comentario: metodo para crear las carpetas y archivos necesarios para el funcionamiento de los metodos
	 * precondiciones: nada
	 * entrada: nada
	 * e/s: nada
	 * salida: nada
	 * postcondiciones: nada, crea los archivos en la ruta especificada
	 */
	@Deprecated
	public static void crearArchivos(){
		if (!carpeta.exists()){
			carpeta.mkdir();
		}
		if (!archivoMedicos.exists()){
			try {
				archivoMedicos.createNewFile();
			}
			catch(IOException e){
				e.printStackTrace();
			}
		}
		if (!bajasMedicos.exists()){
			try {
				bajasMedicos.createNewFile();
			}
			catch(IOException e){
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * cabecera: boolean crearMedico()
	 * comentario: metodo para introducir los parametros de un nuevo medico
	 * precondiciones: nada
	 * entrada: nada
	 * e/s: nada
	 * salida: un logico
	 * postcondiciones: asociado al nombre devuelve true si el medico ha sido creado correctamente y false si no
	 */
	public int crearMedico(){
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		MedicoIMPL medico = null;
		
		boolean dniCorrecto=false, sexoCorrecto=false;
		String nombre="", apellidos="", dniConLetra="", especialidad="", dni="";
		int anio=0, mes=0, dia=0, numeroColegiado=0, codigoDevuelto=-1;
		Calendar fechaNacimiento = null;
		char correcto=' ', sexo=' ';
		
		do
		{
			System.out.println("Introduce nombre");
			try
			{
				nombre = br.readLine().toUpperCase();
			}
			catch(IOException e)
			{
				
			}
		}
		while(nombre == "" || nombre.length()>20);
		
		do
		{
			System.out.println("Introduce apellidos");
			try
			{
				apellidos = br.readLine().toUpperCase();
			}
			catch(IOException e)
			{
				
			}
		}
		while(apellidos == "" || apellidos.length()>20);
		
		System.out.println("Introduce anio de nacimiento");
		try
		{
			anio = Integer.parseInt(br.readLine());
		}
		catch(IOException e)
		{
			
		}
		catch(NumberFormatException e)
		{
			
		}
		
		System.out.println("Introduce mes de nacimiento en digito(enero -> 1)");
		try
		{
			mes = Integer.parseInt(br.readLine())-1;
		}
		catch(IOException e)
		{
			
		}
		catch(NumberFormatException e)
		{
			
		}
		
		System.out.println("Introduce dia de nacimiento");
		try
		{
			dia = Integer.parseInt(br.readLine());
		}
		catch(IOException e)
		{
			
		}
		catch(NumberFormatException e)
		{
			
		}
		
		do
		{
			System.out.println("Introduce DNI sin letra");
			try
			{
				dni = br.readLine();
				
				if(dni.length()==8){
					dniCorrecto=true;
					dniConLetra = MetodosGenerales.aniadirLetraDni(Integer.parseInt(dni));
				}
			}
			catch(IOException e)
			{
				
			}
			catch(NumberFormatException e)
			{
				
			}
		}
		while(!dniCorrecto);
		
		System.out.println("Introduce numero de colegiado");
		try
		{
			numeroColegiado = Integer.parseInt(br.readLine());
		}
		catch(IOException e)
		{
			
		}
		catch(NumberFormatException e)
		{
			
		}
		
		do
		{
			System.out.println("Introduce sexo");
			try
			{
				sexo = br.readLine().toUpperCase().charAt(0);
				if(sexo=='V' || sexo=='M') sexoCorrecto=true;
			}
			catch(Exception e)
			{
				
			}
		}
		while(!sexoCorrecto);
		
		System.out.println("Introduce especialidad");
		try
		{
			especialidad = br.readLine().toUpperCase();
		}
		catch(IOException e)
		{
			
		}
		
		fechaNacimiento = new GregorianCalendar(anio, mes, dia);
		
		do
		{
			System.out.println("Comprueba los datos para confirmar");
			System.out.println("\nNombre: "+nombre);
			System.out.println("Apellidos: "+apellidos);
			System.out.println("Fecha de nacimiento: "+fechaNacimiento.getTime());
			System.out.println("DNI: "+dniConLetra);
			System.out.println("Especialidad: "+especialidad);
			System.out.println("Numero Colegiado: "+numeroColegiado);
			System.out.println("Sexo: "+sexo);
			System.out.println("\nEs correcto? S/N");
			try
			{
				correcto = br.readLine().toUpperCase().charAt(0);
			}
			catch(IOException e){}
		}
		while(correcto!='S'&&correcto!='N');
		
		if(correcto=='S')
		{
			medico = new MedicoIMPL(nombre, apellidos, fechaNacimiento, dniConLetra, numeroColegiado, especialidad, sexo);
			codigoDevuelto = escribirMedico(medico);
			//decidir que diseño hacer para los datos de usuario
			
			//Ponerla como clase de instancias y que tengas que crearla con el id del medico, llamar a un
			//metodo que verifique que el medico este en la base de datos y no esté de baja. Si todo es
			//correcto, devuelve el nombre y la contraseña del usuario que se utilizara para introducir
			//datos en la base de datos.
			
			//Crear clase usuarioSQL con nombre y contraseña?
			
			//Crear una base de datos a parte con login y contraseña de los medicos, y si son correctos devuelve
			//los datos del usuario para trabajar en la base de datos del hospital
		}
		
		
		return codigoDevuelto;
	}
	
	/**
	 * cabecera: boolean escribirMedico(File f, MedicoIMPL m)
	 * comentario: metodo para escribir un objeto de medico en un archivo
	 * precondiciones: el archivo debe existir
	 * entrada: un objeto tipo File y otro tipo MedicoIMPL
	 * e/s: nada
	 * salida: un logico
	 * postcondiciones: asociado al nombre devuelve true si ha escrito el objeto en el archivo y false si el objeto ya existia en el archivo
	 */
	public int escribirMedico(MedicoIMPL m){
		
		Calendar fechaCalendar = m.getFechaNacimiento();
		
		Connection conexionBBDD = null;
		Statement sentencia = null;
		
		int codigoSalida = -1, filasAfectadas = -1, anio = fechaCalendar.get(fechaCalendar.YEAR), 
				mes = fechaCalendar.get(fechaCalendar.MONTH)+1, dia = fechaCalendar.get(fechaCalendar.DAY_OF_MONTH);
		//String sourceURL = "jdbc:sqlserver://localhost";
		String comando;
		String comandoFecha = "DATEFROMPARTS("+anio+","+mes+","+dia+")";
		
		try
		{
			conexionBBDD = DriverManager.getConnection(sourceURL, this.usuario, this.contrasenia);
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			//e.getErrorCode(); recoge el numero que lanza la excepcion
			codigoSalida = 1; //No puede realizarse la conexion
		}
		
		
		if(codigoSalida != 1)
		{
			//insertar comando en sql
			
			try
			{
				sentencia = conexionBBDD.createStatement();
				
				comando = "INSERT INTO "+nombreTablaMedicos+" (Nombre, Apellidos, FechaNacimiento, DNI, NumeroColegiado, Especialidad, Sexo) VALUES "
						+ "( '"+m.getNombre()+"','"+m.getApellidos()+"',"+comandoFecha+",'"+m.getDNI()+"',"+m.getNumeroColegiado()+",'"+m.getEspecialidad()+"','"+m.getSexo()+"' )";
				
				filasAfectadas = sentencia.executeUpdate(comando); //puede saltar excepcion si ya existe?
				
				if(filasAfectadas == 1) codigoSalida=0;
			}
			catch(SQLException e)
			{
				e.printStackTrace();
				codigoSalida = 2; //Ya existe la primary key
			}
			
		}
		
		try
		{
			sentencia.close();
		}
		catch(SQLException e)
		{
			//e.printStackTrace();
		}
		try
		{
			conexionBBDD.close();
		}
		catch(SQLException e)
		{
			//e.printStackTrace();
		}
		
		return codigoSalida;
	}
	
	
	/**
	 * cabecera: void pintarMedicosEnPantalla(File f)
	 * comentario: metodo para pintar los medicos existentes en un archivo en pantalla
	 * precondiciones: el fichero debe existir
	 * entrada: un objeto tipo File
	 * e/s: nada
	 * salida: nada
	 * postcondiciones: nada, pinta en pantalla los medicos guardados en el fichero
	 */
	public void pintarMedicosEnPantalla()
	{
		
		Connection conexionBBDD = null;
		Statement sentencia = null;
		ResultSet resultado = null;
		
		String comando="SELECT nombre, apellidos, dni, fechanacimiento, numerocolegiado, especialidad, sexo from Medicos";
		
		try
		{
			conexionBBDD = DriverManager.getConnection(sourceURL, this.usuario, this.contrasenia);
			sentencia = conexionBBDD.createStatement();
			resultado = sentencia.executeQuery(comando);
			
			while(resultado.next())
			{
				System.out.println(resultado.getString("nombre")+", "+resultado.getString("apellidos")+", "+
						resultado.getString("dni")+", "+resultado.getDate("fechanacimiento")+", "+
						resultado.getInt("numerocolegiado")+", "+resultado.getString("especialidad")+", "+
						resultado.getString("sexo"));
				
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		
	}
	
	
	/**
	 * cabecera: long buscarPosicionNuevoMedicoEnArchivo(File f, MedicoIMPL m)
	 * comentario: metodo para buscar en que posicion se escribirá un nuevo medico
	 * precondiciones: el archivo debe existir
	 * entrada: un objeto tipo File y otro tipo MedicoIMPL
	 * e/s: nada
	 * salida: un entero
	 * postcondiciones: asociado al nombre devuelve la posicion del puntero donde debe escribirse el nuevo medico, o -1 si ya existe en el archivo
	 */
	@Deprecated
	public static long buscarPosicionNuevoMedicoEnArchivo(File f, MedicoIMPL m){
		long puntero = 0;
		int numeroActual=0;
		boolean lugarEncontrado = false;
		boolean repetido = false;
		
		try{
			archivo = new RandomAccessFile(f, "r");
		}
		catch(FileNotFoundException e){
			e.printStackTrace();
		}
		
		try{
			if(archivo.length()>0){
				long i=posicionRegistroNumeroColegiado;
				for(;i<archivo.length() && !lugarEncontrado && !repetido;i=i+tamanioRegistroCompleto){
					archivo.seek(i);
					numeroActual = archivo.readInt();
					if (m.getNumeroColegiado()<numeroActual){
						lugarEncontrado=true;
						//puntero = i-85;
					}
					else if(m.getNumeroColegiado()==numeroActual){
						repetido=true;
						puntero=-1;
					}
				}
				if(lugarEncontrado) puntero = i-(tamanioRegistroCompleto+posicionRegistroNumeroColegiado); //176
				else if (!lugarEncontrado && !repetido)puntero = i-posicionRegistroNumeroColegiado;
			}
		}
		catch(IOException e){
			e.printStackTrace();
		}
		
		return puntero;
	}
	
	
	/**
	 * cabecera: void desplazarRegistrosParaAgregar(File f, long puntero)
	 * comentario: metodo para mover de sitio los registros necesarios para agregar un nuevo MedicoIMPL y mantener el fichero ordenado
	 * precondiciones: el archivo debe existir
	 * entrada: un objeto tipo File y un entero
	 * e/s: nada
	 * salida: nada
	 * postcondiciones: nada, desplaza los registros necesarios para poder escribir el nuevo medico
	 */
	@Deprecated
	public static void desplazarRegistrosParaAgregar(File f, long puntero){
		
		String nombre1="", nombre2="", apellidos1="", apellidos2="", dni1="", dni2="", especialidad1="", especialidad2="";
		long milisFecha1=0, milisFecha2=0, longitudArchivo=0, miPuntero=puntero;
		int numeroColegiado1=0, numeroColegiado2=0;
		char sexo1=' ', sexo2=' ';
		
		try{
			archivo = new RandomAccessFile(f, "rw");
			longitudArchivo = archivo.length();
			archivo.seek(miPuntero);
		}
		catch(FileNotFoundException e){
			e.printStackTrace();
		}
		catch(IOException e){
			e.printStackTrace();
		}
		
		
		try{
			//leer primer objeto
			apellidos1=archivo.readUTF();
			nombre1=archivo.readUTF();
			milisFecha1=archivo.readLong();
			dni1=archivo.readUTF();
			especialidad1=archivo.readUTF();
			numeroColegiado1=archivo.readInt();
			sexo1=archivo.readChar();
			
			
			while(miPuntero<=longitudArchivo){
				miPuntero = archivo.getFilePointer();
				
				if(miPuntero<longitudArchivo){
					//leer segundo objeto
					apellidos2=archivo.readUTF();
					nombre2=archivo.readUTF();
					milisFecha2=archivo.readLong();
					dni2=archivo.readUTF();
					especialidad2=archivo.readUTF();
					numeroColegiado2=archivo.readInt();
					sexo2=archivo.readChar();
					
					archivo.seek(miPuntero);
				}
				
				//escribir primer objeto al comienzo de indice del segundo
				archivo.writeUTF(apellidos1);
				archivo.writeUTF(nombre1);
				archivo.writeLong(milisFecha1);
				archivo.writeUTF(dni1);
				archivo.writeUTF(especialidad1);
				archivo.writeInt(numeroColegiado1);
				archivo.writeChar(sexo1);
				
				if(miPuntero<longitudArchivo){
					//sustituir los campos del primer objeto por los del segundo
					apellidos1=apellidos2;
					nombre1=nombre2;
					milisFecha1=milisFecha2;
					dni1=dni2;
					especialidad1=especialidad2;
					numeroColegiado1=numeroColegiado2;
					sexo1=sexo2;
				}
				else{
					miPuntero++;
				}
			}
		}
		catch(Exception e){}
		
	}
	
	
	/**
	 * cabecera: void desplazarRegistrosParaQuitar(File f, long puntero)
	 * comentario: metodo para mover de sitio los registros necesarios para borrar un MedicoIMPL y mantener el fichero ordenado
	 * precondiciones: el archivo debe existir
	 * entrada: un objeto tipo File y un entero
	 * e/s: nada
	 * salida: nada
	 * postcondiciones: nada, desplaza los registros necesarios para poder borrar el medico
	 */
	@Deprecated
	public static void desplazarRegistrosParaQuitar(File f, long puntero){
		
		String nombre1="", apellidos1="", dni1="", especialidad1="";
		long milisFecha1=0, longitudArchivo=0, miPuntero=puntero;
		int numeroColegiado1=0;
		char sexo1=' ';
		
		try{
			archivo = new RandomAccessFile(f, "rw");
			longitudArchivo = archivo.length();
			archivo.seek(miPuntero);
		}
		catch(FileNotFoundException e){
			e.printStackTrace();
		}
		catch(IOException e){
			e.printStackTrace();
		}
		
		
		try{
			while(miPuntero<(longitudArchivo-tamanioRegistroCompleto)){
				
				//leer el objeto a escribir
				miPuntero=miPuntero+tamanioRegistroCompleto;
				archivo.seek(miPuntero);
				apellidos1=archivo.readUTF();
				nombre1=archivo.readUTF();
				milisFecha1=archivo.readLong();
				dni1=archivo.readUTF();
				especialidad1=archivo.readUTF();
				numeroColegiado1=archivo.readInt();
				sexo1=archivo.readChar();
				
				
				//escribir el objeto encima del que se va a borrar
				miPuntero=miPuntero-tamanioRegistroCompleto;
				archivo.seek(miPuntero);
				archivo.writeUTF(apellidos1);
				archivo.writeUTF(nombre1);
				archivo.writeLong(milisFecha1);
				archivo.writeUTF(dni1);
				archivo.writeUTF(especialidad1);
				archivo.writeInt(numeroColegiado1);
				archivo.writeChar(sexo1);
				
				
				miPuntero=archivo.getFilePointer();
			}
			
			archivo.setLength(miPuntero);
		}
		catch(Exception e){}
		
	}
	
	
	
	/**
	 * cabecera: int borrarMedico(int numeroColegiado)
	 * comentario: metodo para borrar un medico del archivo de medicos
	 * precondiciones: el medico debe existir
	 * entrada: un entero
	 * e/s: nada
	 * salida: un entero
	 * postcondiciones: asociado al nombre devuelve -1 no se ha podido encontrar el medico a borrar, 1 borrado el medico pero no se ha añadido al archivo de bajas, 0 se ha borrado satisfactoriamente y se ha movido el medico borrado al fichero de bajas
	 */
	@Deprecated
	public static int borrarMedico(int numeroColegiado){
		
		MedicoIMPL m = null;
		Calendar fecha = new GregorianCalendar();
		long puntero=0;
		boolean medicoEncontrado = false, estaBorrado=false;
		String nombre="", apellidos="", dni="", especialidad="";
		long milisFecha1=0;
		char sexo=' ';
		int exito = -1;
		
		try{
			//abrir el fichero de medicos
			archivo = new RandomAccessFile(archivoMedicos, "rw");
			
			//leer el fichero hasta encontrar el medico a borrar
			
			for(long i=posicionRegistroNumeroColegiado;!medicoEncontrado && i<archivo.length();i=i+tamanioRegistroCompleto){
				archivo.seek(i);
				int numero = archivo.readInt();
				if(numero==numeroColegiado){
					medicoEncontrado=true;
					
					//mover el puntero para copiar el objeto
					archivo.seek(i-posicionRegistroNumeroColegiado);
					
					apellidos=archivo.readUTF();
					nombre=archivo.readUTF();
					milisFecha1=archivo.readLong();
					dni=archivo.readUTF();
					especialidad=archivo.readUTF();
					numero=archivo.readInt();
					sexo=archivo.readChar();
					
					fecha.setTimeInMillis(milisFecha1);
					m = new MedicoIMPL(nombre, apellidos, fecha, dni, numeroColegiado, especialidad, sexo);
					
					//marcar la posicion a borrar
					puntero = archivo.getFilePointer()-tamanioRegistroCompleto;
				}
			}
			
			//mover los medicos restantes de posicion para eliminar el medico de baja
			desplazarRegistrosParaQuitar(archivoMedicos, puntero);
			
			//copiar el medico al fichero de bajas
			estaBorrado = escribirMedico(bajasMedicos, m);
			
			if(estaBorrado){
				exito = 0;
			}
			else{
				exito = 1;
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			try{
				archivo.close();
			}
			catch(IOException e){
				e.printStackTrace();
			}
		}
		
		return exito;
	}
	
	
	/**
	 * cabecera: Paciente getMedico(File f, int numeroColegiado)
	 * comentario: Metodo para obtener los datos de un medico
	 * precondiciones: nada
	 * entrada: un archivo y un entero
	 * e/s: nada
	 * salida: un objeto tipo MedicoIMPL
	 * postcondiciones: asociado al nombre devuelve el objeto MedicoIMPL buscado, o null si no existe en el archivo
	 */
	public MedicoIMPL getMedico(int numeroColegiado)
	{
		
		MedicoIMPL m = null;
		//Date fecha = null;
		java.sql.Date fecha = null;
		Calendar fechaFinal = null;
		String nombre="", apellidos="", dni="", especialidad="";
		int numero=0;
		char sexo=' ';
		
		Connection conexion = null;
		Statement sentencia = null;
		ResultSet resultado = null;
		String comando = "SELECT nombre, apellidos, dni, fechanacimiento, numerocolegiado, especialidad, sexo from Medicos where numerocolegiado="+numeroColegiado;
		
		try
		{
			conexion = DriverManager.getConnection(sourceURL, this.usuario, this.contrasenia);
			
			sentencia = conexion.createStatement();
			
			resultado = sentencia.executeQuery(comando);
			
			resultado.next();
			
			System.out.println(resultado.getString("nombre"));
			
			nombre = resultado.getString("Nombre");
			apellidos = resultado.getString("Apellidos");
			dni = resultado.getString("DNI");
			fecha = resultado.getDate("FechaNacimiento");
			numero = resultado.getInt("NumeroColegiado");
			especialidad = resultado.getString("Especialidad");
			sexo = resultado.getString("Sexo").charAt(0);
			
			/**/
			System.out.println(fecha+", "+fecha.getTime());
			/**/
			
			fechaFinal = new GregorianCalendar();
			//fechaFinal.setTime(fecha);
			fechaFinal.setTimeInMillis(fecha.getTime());
			
			m = new MedicoIMPL(nombre, apellidos, fechaFinal, dni, numero, especialidad, sexo);
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			System.out.println(e.getErrorCode());
		}
		finally
		{
			try
			{
				resultado.close();
			}
			catch(SQLException e)
			{
				e.printStackTrace();
			}
			try
			{
				sentencia.close();
			}
			catch(SQLException e)
			{
				e.printStackTrace();
			}
			try
			{
				conexion.close();
			}
			catch(SQLException e)
			{
				e.printStackTrace();
			}
		}
		
		return m;
	}
	
	
	/*
	 * buscar el medico en la base de datos NO NECESARIO ----
	 * 
	 * si el medico existe NO ----
	 * 		buscar si ya estaba de baja ----
	 * 		si no lo estaba----
	 * 			escribir baja
	 * 		fin si----
	 * fin si NO ----
	 * 
	 * 0: dado de baja correctamente
	 * 1: ya se encontraba de baja
	 * 2: medico no encontrado
	 */
	//public int darMedicoDeBaja(int numeroColegiado, Calendar fechaInicio)
	public int darMedicoDeBaja(int numeroColegiado, String fechaInicio)
	{
		Connection conexion = null;
		Statement sentencia = null;
		ResultSet resultado = null;
		
		int codigo = -1;
		//int anio = fechaInicio.get(fechaInicio.YEAR);
		//int mes = fechaInicio.get(fechaInicio.MONTH)+1;
		//int dia = fechaInicio.get(fechaInicio.DAY_OF_MONTH);
		//int hora = fechaInicio.get(fechaInicio.HOUR);
		//int minuto = fechaInicio.get(fechaInicio.MINUTE);
		//String comando = "execute EscribirBajaDeMedico "+numeroColegiado+", SMALLDATETIMEFROMPARTS("+anio+","+mes+","+dia+","+hora+","+minuto+")"; 
		String comando = "execute EscribirBajaDeMedico "+numeroColegiado+", '"+fechaInicio+"'"; 

		
		
		//preguntar a leo si se puede coger en java lo que devuelve el procedimiento o si es necesario 
		//crear una funcion que llame al procedimiento
		
		//simplemente escribir la baja, si ya existe nos devuelve una excepcion
		
		try
		{
			conexion = DriverManager.getConnection(sourceURL, this.usuario, this.contrasenia);
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			codigo = 1; //no se ha podido realizar la conexion
		}
		
		if(codigo!=1)
		{
			try
			{
				sentencia = conexion.createStatement();
				resultado = sentencia.executeQuery(comando);
				codigo = 0;
			}
			catch (SQLException e)
			{
				if(e.getErrorCode()==51001)
				{
					codigo = 2; //ya esta de baja ese medico
				}
				else if(e.getErrorCode()==547)
				{
					codigo = 3; //No existe ese medico en la base de datos
				}
				else if(e.getErrorCode()==0)
				{
					codigo = 0; //Salta porque no devuelve nada si se inserta correctamente
				}
				else
				{
					e.printStackTrace();
					System.out.println("Codigo de error: "+e.getErrorCode()); 
				}
			}
			finally
			{
				try
				{
					resultado.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
				}
				catch(NullPointerException e)
				{
					
				}
				try
				{
					sentencia.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
				}
				try
				{
					conexion.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
				}
			}
		}
		
		
		return codigo;
	}
	
	
	
	/**
	 * 
	 */
	
	/**
	 * PG
	 * inicio
	 * 	mandar comando a sql
	 *  devolver resultado de operacion
	 * fin
	 */
	public int darMedicoDeAlta(int numeroColegiado, String fechaFin)
	{
		Connection conexion = null;
		Statement sentencia = null;
		
		int filasAfectadas=-1;
		String comando = "update MedicosDeBaja set FechaFin = "+fechaFin+" where NumeroColegiadoMedico="+numeroColegiado+" and FechaFin is null";
		
		try
		{
			conexion = DriverManager.getConnection(sourceURL,this.usuario, this.contrasenia);
			sentencia = conexion.createStatement();
			
			filasAfectadas = sentencia.executeUpdate(comando); //si devuelve 0 fracaso, 1 exito
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			System.out.println(e.getErrorCode());
		}
		finally
		{
			try
			{
				sentencia.close();
			}
			catch(SQLException e)
			{
				
			}
			try
			{
				conexion.close();
			}
			catch(SQLException e)
			{
				
			}
		}
		
		return filasAfectadas;
	}
	
	
	/**
	 * 
	 */
	public void historialDeBajasMedico(int numeroColegiado)
	{
		Connection conexion = null;
		Statement sentencia = null;
		ResultSet resultado = null;
		
		String comando = "SELECT ID, FechaInicio, FechaFin from MedicosDeBaja WHERE NumeroColegiadoMedico="+numeroColegiado;
		
		try
		{
			conexion = DriverManager.getConnection(sourceURL, this.usuario, this.contrasenia);
			sentencia = conexion.createStatement();
			resultado = sentencia.executeQuery(comando);
			
			while(resultado.next())
			{
				System.out.println(resultado.getInt("ID")+", "+resultado.getTimestamp(("FechaInicio"))+", "+resultado.getTimestamp("FechaFin"));
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			System.out.println(e.getErrorCode());
		}
		finally
		{
			try
			{
				resultado.close();
			}
			catch(SQLException e)
			{
				
			}
			catch(NullPointerException e)
			{
				
			}
			try
			{
				sentencia.close();
			}
			catch(SQLException e)
			{
				
			}
			try
			{
				conexion.close();
			}
			catch(SQLException e)
			{
				
			}
		}
	}
	
	
	/**
	 * 
	 */
	public void medicosDeBaja()
	{
		Connection conexion = null;
		Statement sentencia = null;
		ResultSet resultado = null;
		
		String comando = "SELECT MB.NumeroColegiadoMedico, M.Nombre, M.Apellidos, MB.FechaInicio, MB.FechaFin from MedicosDeBaja as MB inner join Medicos as M on MB.NumeroColegiadoMedico=M.NumeroColegiado WHERE MB.FechaFin IS NULL";
		
		try
		{
			conexion = DriverManager.getConnection(sourceURL, this.usuario, this.contrasenia);
			sentencia = conexion.createStatement();
			resultado = sentencia.executeQuery(comando);
			
			while(resultado.next())
			{
				System.out.println(resultado.getInt("NumeroColegiadoMedico")+", "+resultado.getString("Nombre")+", "+resultado.getString("Apellidos")+", "+resultado.getTimestamp(("FechaInicio"))+", "+resultado.getTimestamp("FechaFin"));
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			System.out.println(e.getErrorCode());
		}
		finally
		{
			try
			{
				resultado.close();
			}
			catch(SQLException e)
			{
				
			}
			catch(NullPointerException e)
			{
				
			}
			try
			{
				sentencia.close();
			}
			catch(SQLException e)
			{
				
			}
			try
			{
				conexion.close();
			}
			catch(SQLException e)
			{
				
			}
		}
	}
	
	
	
}
